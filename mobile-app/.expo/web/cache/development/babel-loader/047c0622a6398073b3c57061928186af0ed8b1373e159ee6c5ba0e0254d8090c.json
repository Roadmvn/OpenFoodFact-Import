{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport PayPal from 'react-native-paypal-wrapper';\nimport api from \"./api\";\nvar PaymentService = function () {\n  function PaymentService() {\n    _classCallCheck(this, PaymentService);\n    this.paypal = null;\n    this.initialized = false;\n  }\n  return _createClass(PaymentService, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(function* () {\n        if (this.initialized) return;\n        try {\n          var _yield$api$get = yield api.get('/payment/config'),\n            data = _yield$api$get.data;\n          yield PayPal.initialize(data.paypalClientId, data.environment);\n          this.paypal = PayPal;\n          this.initialized = true;\n        } catch (error) {\n          console.error('Erreur lors de l\\'initialisation de PayPal:', error);\n          throw new Error('Impossible d\\'initialiser le service de paiement');\n        }\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"createOrder\",\n    value: function () {\n      var _createOrder = _asyncToGenerator(function* (cartItems, total) {\n        if (!this.initialized) {\n          yield this.initialize();\n        }\n        try {\n          var _yield$api$post = yield api.post('/orders', {\n              items: cartItems,\n              total: total\n            }),\n            order = _yield$api$post.data;\n          var paypalOrder = yield this.paypal.requestOneTimePayment('sandbox', {\n            amount: total.toString(),\n            currency: 'USD',\n            orderId: order.id\n          });\n          yield api.patch(`/orders/${order.id}`, {\n            paypalOrderId: paypalOrder.orderId\n          });\n          return {\n            orderId: order.id,\n            paypalOrderId: paypalOrder.orderId\n          };\n        } catch (error) {\n          console.error('Erreur lors de la création de la commande:', error);\n          throw new Error('Impossible de créer la commande');\n        }\n      });\n      function createOrder(_x, _x2) {\n        return _createOrder.apply(this, arguments);\n      }\n      return createOrder;\n    }()\n  }, {\n    key: \"processPayment\",\n    value: function () {\n      var _processPayment = _asyncToGenerator(function* (orderId, paypalOrderId) {\n        if (!this.initialized) {\n          yield this.initialize();\n        }\n        try {\n          var payment = yield this.paypal.requestOneTimePayment('sandbox', {\n            amount: total.toString(),\n            currency: 'USD',\n            orderId: orderId\n          });\n          if (payment.response.state === 'approved') {\n            var _yield$api$post2 = yield api.post(`/orders/${orderId}/confirm`, {\n                paypalTransaction: payment\n              }),\n              confirmedOrder = _yield$api$post2.data;\n            return {\n              success: true,\n              order: confirmedOrder\n            };\n          }\n          throw new Error('Le paiement n\\'a pas été complété');\n        } catch (error) {\n          console.error('Erreur lors du traitement du paiement:', error);\n          yield api.post(`/orders/${orderId}/cancel`, {\n            reason: 'payment_failed',\n            error: error.message\n          });\n          throw new Error('Impossible de traiter le paiement');\n        }\n      });\n      function processPayment(_x3, _x4) {\n        return _processPayment.apply(this, arguments);\n      }\n      return processPayment;\n    }()\n  }, {\n    key: \"getPaymentMethods\",\n    value: function () {\n      var _getPaymentMethods = _asyncToGenerator(function* () {\n        try {\n          var _yield$api$get2 = yield api.get('/payment/methods'),\n            data = _yield$api$get2.data;\n          return data;\n        } catch (error) {\n          console.error('Erreur lors de la récupération des méthodes de paiement:', error);\n          return [];\n        }\n      });\n      function getPaymentMethods() {\n        return _getPaymentMethods.apply(this, arguments);\n      }\n      return getPaymentMethods;\n    }()\n  }, {\n    key: \"validatePaymentMethod\",\n    value: function () {\n      var _validatePaymentMethod = _asyncToGenerator(function* (methodId) {\n        try {\n          var _yield$api$post3 = yield api.post('/payment/validate-method', {\n              methodId: methodId\n            }),\n            data = _yield$api$post3.data;\n          return data.valid;\n        } catch (error) {\n          console.error('Erreur lors de la validation du mode de paiement:', error);\n          throw new Error('Impossible de valider le mode de paiement');\n        }\n      });\n      function validatePaymentMethod(_x5) {\n        return _validatePaymentMethod.apply(this, arguments);\n      }\n      return validatePaymentMethod;\n    }()\n  }]);\n}();\nexport var paymentService = new PaymentService();","map":{"version":3,"names":["PayPal","api","PaymentService","_classCallCheck","paypal","initialized","_createClass","key","value","_initialize","_asyncToGenerator","_yield$api$get","get","data","initialize","paypalClientId","environment","error","console","Error","apply","arguments","_createOrder","cartItems","total","_yield$api$post","post","items","order","paypalOrder","requestOneTimePayment","amount","toString","currency","orderId","id","patch","paypalOrderId","createOrder","_x","_x2","_processPayment","payment","response","state","_yield$api$post2","paypalTransaction","confirmedOrder","success","reason","message","processPayment","_x3","_x4","_getPaymentMethods","_yield$api$get2","getPaymentMethods","_validatePaymentMethod","methodId","_yield$api$post3","valid","validatePaymentMethod","_x5","paymentService"],"sources":["/home/roadmvn/devops/Devops_starter/mobile-app/src/services/payment.service.js"],"sourcesContent":["import PayPal from 'react-native-paypal-wrapper';\nimport api from './api';\n\nclass PaymentService {\n  constructor() {\n    this.paypal = null;\n    this.initialized = false;\n  }\n\n  async initialize() {\n    if (this.initialized) return;\n\n    try {\n      // Récupération de la configuration PayPal depuis le backend\n      const { data } = await api.get('/payment/config');\n      \n      await PayPal.initialize(\n        data.paypalClientId,\n        data.environment // 'sandbox' ou 'production'\n      );\n\n      this.paypal = PayPal;\n      this.initialized = true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'initialisation de PayPal:', error);\n      throw new Error('Impossible d\\'initialiser le service de paiement');\n    }\n  }\n\n  async createOrder(cartItems, total) {\n    if (!this.initialized) {\n      await this.initialize();\n    }\n\n    try {\n      // Création de la commande côté backend\n      const { data: order } = await api.post('/orders', {\n        items: cartItems,\n        total\n      });\n\n      // Création de la commande PayPal\n      const paypalOrder = await this.paypal.requestOneTimePayment('sandbox', {\n        amount: total.toString(),\n        currency: 'USD',\n        orderId: order.id\n      });\n\n      // Mise à jour de l'ID de commande PayPal dans notre backend\n      await api.patch(`/orders/${order.id}`, {\n        paypalOrderId: paypalOrder.orderId\n      });\n\n      return {\n        orderId: order.id,\n        paypalOrderId: paypalOrder.orderId\n      };\n    } catch (error) {\n      console.error('Erreur lors de la création de la commande:', error);\n      throw new Error('Impossible de créer la commande');\n    }\n  }\n\n  async processPayment(orderId, paypalOrderId) {\n    if (!this.initialized) {\n      await this.initialize();\n    }\n\n    try {\n      const payment = await this.paypal.requestOneTimePayment('sandbox', {\n        amount: total.toString(),\n        currency: 'USD',\n        orderId\n      });\n\n      if (payment.response.state === 'approved') {\n        // Mise à jour du statut de la commande dans notre backend\n        const { data: confirmedOrder } = await api.post(`/orders/${orderId}/confirm`, {\n          paypalTransaction: payment\n        });\n\n        return {\n          success: true,\n          order: confirmedOrder\n        };\n      }\n      \n      throw new Error('Le paiement n\\'a pas été complété');\n    } catch (error) {\n      console.error('Erreur lors du traitement du paiement:', error);\n      \n      // Annulation de la commande en cas d'échec\n      await api.post(`/orders/${orderId}/cancel`, {\n        reason: 'payment_failed',\n        error: error.message\n      });\n\n      throw new Error('Impossible de traiter le paiement');\n    }\n  }\n\n  async getPaymentMethods() {\n    try {\n      const { data } = await api.get('/payment/methods');\n      return data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des méthodes de paiement:', error);\n      return [];\n    }\n  }\n\n  async validatePaymentMethod(methodId) {\n    try {\n      const { data } = await api.post('/payment/validate-method', {\n        methodId\n      });\n      return data.valid;\n    } catch (error) {\n      console.error('Erreur lors de la validation du mode de paiement:', error);\n      throw new Error('Impossible de valider le mode de paiement');\n    }\n  }\n}\n\nexport const paymentService = new PaymentService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}